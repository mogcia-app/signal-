'use client';

import { useState, useEffect } from 'react';
import { useAuth } from '../../contexts/auth-context';
import { useUserProfile } from '../../hooks/useUserProfile';
import { useRouter } from 'next/navigation';
import { doc, updateDoc } from 'firebase/firestore';
import { db } from '../../lib/firebase';
import { CheckCircle, ArrowRight, ArrowLeft, Sparkles, User, Mail, Calendar, Edit2, Save, X } from 'lucide-react';
import SNSLayout from '../../components/sns-layout';

export default function OnboardingPage() {
  const { user, loading: authLoading } = useAuth();
  const { userProfile, loading: profileLoading } = useUserProfile();
  const router = useRouter();
  const [currentStep, setCurrentStep] = useState(1);
  const [isEditing, setIsEditing] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // „Çπ„ÉÜ„ÉÉ„Éó1: „Éì„Ç∏„Éç„ÇπÊÉÖÂ†±
  const [businessInfo, setBusinessInfo] = useState({
    industry: '',
    companySize: '',
    businessType: '',
    description: '',
    targetMarket: '',
    catchphrase: ''
  });
  const [customIndustry, setCustomIndustry] = useState('');

  // „Çπ„ÉÜ„ÉÉ„Éó2: ÁõÆÊ®ô„ÉªË™≤È°å
  const [goals, setGoals] = useState<string[]>([]);
  const [challenges, setChallenges] = useState<string[]>([]);
  const [customGoal, setCustomGoal] = useState('');
  const [customChallenge, setCustomChallenge] = useState('');

  // ÂïÜÂìÅ„Éª„Çµ„Éº„Éì„ÇπÊÉÖÂ†±
  const [productsOrServices, setProductsOrServices] = useState<Array<{ id: string; name: string; details: string }>>([]);
  const [productName, setProductName] = useState('');
  const [productDetails, setProductDetails] = useState('');
  const [editingProductId, setEditingProductId] = useState<string | null>(null);

  // „Çπ„ÉÜ„ÉÉ„Éó3: SNS AIË®≠ÂÆö
  const [snsAISettings, setSnsAISettings] = useState<Record<string, { 
    enabled: boolean; 
    tone?: string; 
    features?: string[];
    manner?: string;
    cautions?: string;
    goals?: string;
    motivation?: string;
    additionalInfo?: string;
  }>>({});
  const [customFeature, setCustomFeature] = useState('');

  // „É¶„Éº„Ç∂„Éº„Éó„É≠„Éï„Ç°„Ç§„É´„Åã„Çâ„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„ÇÄ
  useEffect(() => {
    if (userProfile?.businessInfo) {
      setBusinessInfo({
        industry: userProfile.businessInfo.industry || '',
        companySize: userProfile.businessInfo.companySize || '',
        businessType: userProfile.businessInfo.businessType || '',
        description: userProfile.businessInfo.description || '',
        targetMarket: userProfile.businessInfo.targetMarket || '',
        catchphrase: userProfile.businessInfo.catchphrase || ''
      });
      setGoals(userProfile.businessInfo.goals || []);
      setChallenges(userProfile.businessInfo.challenges || []);
      setProductsOrServices(userProfile.businessInfo.productsOrServices || []);
    }
    if (userProfile?.snsAISettings) {
      setSnsAISettings(userProfile.snsAISettings as Record<string, { enabled: boolean; tone?: string; features?: string[] }>);
    }
  }, [userProfile]);

  useEffect(() => {
    // loading‰∏≠„ÅØ„É™„ÉÄ„Ç§„É¨„ÇØ„Éà„Åó„Å™„ÅÑÔºàFirebaseÂàùÊúüÂåñÂæÖ„Å°Ôºâ
    if (!authLoading && !user) {
      router.push('/login');
    }
  }, [user, authLoading, router]);

  const totalSteps = 3;
  const progress = (currentStep / totalSteps) * 100;

  // Ë°®Á§∫Áî®„ÅÆÂ§âÊèõÈñ¢Êï∞
  const getIndustryLabel = (value: string) => {
    const map: Record<string, string> = {
      'it': 'IT„Éª„ÉÜ„ÇØ„Éé„É≠„Ç∏„Éº',
      'retail': 'Â∞èÂ£≤„ÉªEC',
      'food': 'È£≤È£ü',
      'beauty': 'ÁæéÂÆπ„ÉªÂÅ•Â∫∑',
      'education': 'ÊïôËÇ≤',
      'realestate': '‰∏çÂãïÁî£',
      'other': '„Åù„ÅÆ‰ªñ'
    };
    return map[value] || value;
  };

  const getCompanySizeLabel = (value: string) => {
    const map: Record<string, string> = {
      'individual': 'ÂÄã‰∫∫',
      'small': '2-10Âêç',
      'medium': '11-50Âêç',
      'large': '51-200Âêç',
      'enterprise': '201Âêç‰ª•‰∏ä'
    };
    return map[value] || value;
  };

  const getBusinessTypeLabel = (value: string) => {
    const map: Record<string, string> = {
      'btoc': 'BtoC',
      'btob': 'BtoB',
      'both': 'BtoB/BtoC‰∏°Êñπ'
    };
    return map[value] || value;
  };

  const getTargetMarketLabel = (value: string) => {
    const map: Record<string, string> = {
      'teens': '10‰ª£',
      '20s': '20‰ª£',
      '30s': '30‰ª£',
      '40s': '40‰ª£',
      '50plus': '50‰ª£‰ª•‰∏ä',
      'all': 'ÂÖ®Âπ¥ÈΩ¢'
    };
    return map[value] || value;
  };

  // ÈÅ∏ÊäûËÇ¢„Éá„Éº„Çø
  const industryOptions = ['IT„Éª„ÉÜ„ÇØ„Éé„É≠„Ç∏„Éº', 'Â∞èÂ£≤„ÉªEC', 'È£≤È£ü', 'ÁæéÂÆπ„ÉªÂÅ•Â∫∑', 'ÊïôËÇ≤', '‰∏çÂãïÁî£', '„Åù„ÅÆ‰ªñ'];
  const companySizeOptions = ['ÂÄã‰∫∫', '2-10Âêç', '11-50Âêç', '51-200Âêç', '201Âêç‰ª•‰∏ä'];
  const businessTypeOptions = ['BtoC', 'BtoB', 'BtoB/BtoC‰∏°Êñπ'];
  const targetMarketOptions = ['10‰ª£', '20‰ª£', '30‰ª£', '40‰ª£', '50‰ª£‰ª•‰∏ä', 'ÂÖ®Âπ¥ÈΩ¢'];
  
  const goalOptions = [
    '„Éï„Ç©„É≠„ÉØ„ÉºÂ¢óÂä†',
    '„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„ÉàÂêë‰∏ä',
    '„Éñ„É©„É≥„ÉâË™çÁü•Â∫¶Âêë‰∏ä',
    '„É™„Éº„ÉâÁç≤Âæó',
    'Â£≤‰∏äÂêë‰∏ä',
    '„Ç≥„Éü„É•„Éã„ÉÜ„Ç£ÊßãÁØâ'
  ];
  
  const challengeOptions = [
    '„Ç≥„É≥„ÉÜ„É≥„ÉÑ‰ΩúÊàê',
    'ÊäïÁ®ø„Çø„Ç§„Éü„É≥„Ç∞',
    '„Éè„ÉÉ„Ç∑„É•„Çø„Ç∞ÈÅ∏ÂÆö',
    'ÂàÜÊûê„ÉªÊîπÂñÑ',
    'ÊôÇÈñì‰∏çË∂≥',
    '„Ç¢„Ç§„Éá„Ç¢‰∏çË∂≥'
  ];

  const toneOptions = [
    { value: '„Éï„É¨„É≥„Éâ„É™„Éº', label: '„Éï„É¨„É≥„Éâ„É™„Éº', emoji: 'üòä' },
    { value: '„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´', label: '„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´', emoji: 'üíº' },
    { value: '„Ç´„Ç∏„É•„Ç¢„É´', label: '„Ç´„Ç∏„É•„Ç¢„É´', emoji: 'üéâ' },
    { value: '„Éï„Ç©„Éº„Éû„É´', label: '„Éï„Ç©„Éº„Éû„É´', emoji: 'üé©' }
  ];

  const featureOptions = [
    '„Éè„ÉÉ„Ç∑„É•„Çø„Ç∞ÊúÄÈÅ©Âåñ',
    'ÊäïÁ®øÊôÇÈñìÊèêÊ°à',
    '„Ç≥„É≥„ÉÜ„É≥„ÉÑÂàÜÊûê',
    '„Éà„É¨„É≥„ÉâÂàÜÊûê',
    'Á´∂ÂêàÂàÜÊûê',
    '„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„Éà‰∫àÊ∏¨'
  ];

  // Ê¨°„Å∏
  const handleNext = () => {
    if (currentStep < totalSteps) {
      setCurrentStep(currentStep + 1);
    }
  };

  // Êàª„Çã
  const handleBack = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  // ÂïÜÂìÅ„Éª„Çµ„Éº„Éì„Çπ„ÅÆËøΩÂä†
  const addProduct = () => {
    if (!productName.trim()) {
      alert('È†ÖÁõÆÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
      return;
    }

    const newProduct = {
      id: Date.now().toString(),
      name: productName.trim(),
      details: productDetails.trim()
    };

    setProductsOrServices([...productsOrServices, newProduct]);
    setProductName('');
    setProductDetails('');
  };

  // ÂïÜÂìÅ„Éª„Çµ„Éº„Éì„Çπ„ÅÆÁ∑®ÈõÜ
  const startEditProduct = (product: { id: string; name: string; details: string }) => {
    setEditingProductId(product.id);
    setProductName(product.name);
    setProductDetails(product.details);
  };

  const saveEditProduct = () => {
    if (!editingProductId || !productName.trim()) return;

    setProductsOrServices(productsOrServices.map(p => 
      p.id === editingProductId 
        ? { ...p, name: productName.trim(), details: productDetails.trim() }
        : p
    ));
    setEditingProductId(null);
    setProductName('');
    setProductDetails('');
  };

  const cancelEditProduct = () => {
    setEditingProductId(null);
    setProductName('');
    setProductDetails('');
  };

  // ÂïÜÂìÅ„Éª„Çµ„Éº„Éì„Çπ„ÅÆÂâäÈô§
  const removeProduct = (id: string) => {
    setProductsOrServices(productsOrServices.filter(p => p.id !== id));
  };

  // ÂÆå‰∫ÜÂá¶ÁêÜ
  const handleComplete = async () => {
    if (!user) return;

    setIsSubmitting(true);
    try {
      const userDocRef = doc(db, 'users', user.uid);
      
      // Ê•≠Á®Æ„Åå„Äå„Åù„ÅÆ‰ªñ„Äç„ÅÆÂ†¥Âêà„ÅØ„Ç´„Çπ„Çø„É†Ê•≠Á®Æ„Çí‰ΩøÁî®
      const finalIndustry = businessInfo.industry === '„Åù„ÅÆ‰ªñ' && customIndustry.trim() 
        ? customIndustry.trim() 
        : businessInfo.industry;
      
      await updateDoc(userDocRef, {
        businessInfo: {
          ...businessInfo,
          industry: finalIndustry,
          goals,
          challenges,
          productsOrServices
        },
        snsAISettings,
        setupRequired: false,
        status: 'active',
        updatedAt: new Date().toISOString()
      });

      console.log('‚úÖ Onboarding completed successfully');
      alert('‚úÖ Ë®≠ÂÆö„Çí‰øùÂ≠ò„Åó„Åæ„Åó„ÅüÔºÅÂæ°Á§æÂ∞ÇÁî®AI„Å´ÂèçÊò†„Åï„Çå„Åæ„Åó„Åü„ÄÇ');
      setIsEditing(false);
      setCurrentStep(1);
      // „Éö„Éº„Ç∏„Çí„É™„É≠„Éº„Éâ„Åó„Å¶ÊúÄÊñ∞„Éá„Éº„Çø„ÇíÂèçÊò†
      window.location.reload();
    } catch (error) {
      console.error('Error completing onboarding:', error);
      alert('Ë®≠ÂÆö„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ');
    } finally {
      setIsSubmitting(false);
    }
  };

  // ÂêÑ„Çπ„ÉÜ„ÉÉ„Éó„ÅÆÊ§úË®º
  const isStep1Valid = businessInfo.industry && businessInfo.companySize && businessInfo.businessType && businessInfo.targetMarket;
  const isStep2Valid = goals.length > 0 && challenges.length > 0;
  const isStep3Valid = Object.keys(snsAISettings).length > 0 && 
    Object.values(snsAISettings).some(s => s.enabled && s.tone && s.tone.trim());

  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <SNSLayout 
      currentSNS="instagram" 
      customTitle="ÂàùÊúüË®≠ÂÆö" 
      customDescription="Âæ°Á§æÂ∞ÇÁî®AI„ÇíÊßãÁØâ„Åô„Çã„Åü„ÇÅ„ÅÆÊÉÖÂ†±„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
    >
      <div className="py-6">
        <div className="max-w-full">
        {/* „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„Çª„ÇØ„Ç∑„Éß„É≥ */}
        {userProfile && (
          <div className="mb-6 bg-white border-l-4 border-[#FF8A15] p-6">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-bold text-gray-900">„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±</h2>
              <div className="flex items-center space-x-2">
                <span className={`px-3 py-1 text-xs font-medium ${
                  userProfile.status === 'active' 
                    ? 'bg-green-100 text-green-700' 
                    : 'bg-[#FF8A15] text-white'
                }`}>
                  {userProfile.status === 'active' ? '‚úì „Ç¢„ÇØ„ÉÜ„Ç£„Éñ' : 'ÂàùÊúüË®≠ÂÆöÂæÖ„Å°'}
                </span>
                <span className="px-3 py-1 border-2 border-[#FF8A15] text-[#FF8A15] text-xs font-medium">
                  {userProfile.contractType === 'annual' ? 'Âπ¥ÈñìÂ•ëÁ¥Ñ' : '„Éà„É©„Ç§„Ç¢„É´'}
                </span>
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              {/* ÂêçÂâç */}
              <div className="border border-gray-200 p-4">
                <label className="flex items-center text-xs font-medium text-gray-600 mb-2">
                  <User className="h-3 w-3 mr-1 text-[#FF8A15]" />
                  ÂêçÂâç
                </label>
                <p className="text-gray-900 font-semibold">{userProfile.name}</p>
              </div>

              {/* „É°„Éº„É´„Ç¢„Éâ„É¨„Çπ */}
              <div className="border border-gray-200 p-4">
                <label className="flex items-center text-xs font-medium text-gray-600 mb-2">
                  <Mail className="h-3 w-3 mr-1 text-[#FF8A15]" />
                  „É°„Éº„É´„Ç¢„Éâ„É¨„Çπ
                </label>
                <p className="text-gray-900 font-semibold text-sm break-all">{userProfile.email}</p>
              </div>

              {/* Â•ëÁ¥ÑÊúüÈñì */}
              <div className="border border-gray-200 p-4">
                <label className="flex items-center text-xs font-medium text-gray-600 mb-2">
                  <Calendar className="h-3 w-3 mr-1 text-[#FF8A15]" />
                  Â•ëÁ¥ÑÊúüÈñì
                </label>
                <p className="text-gray-900 font-semibold text-sm">
                  {new Date(userProfile.contractStartDate).toLocaleDateString('ja-JP', { year: 'numeric', month: '2-digit', day: '2-digit' })}
                  {' „Äú '}
                  {new Date(userProfile.contractEndDate).toLocaleDateString('ja-JP', { year: 'numeric', month: '2-digit', day: '2-digit' })}
                </p>
              </div>
            </div>

            {/* Â•ëÁ¥ÑSNS */}
            {userProfile.contractSNS && userProfile.contractSNS.length > 0 && (
              <div className="pt-4 border-t border-gray-200">
                <label className="block text-xs font-medium text-gray-600 mb-3">Â•ëÁ¥ÑSNS</label>
                <div className="flex flex-wrap gap-2">
                  {userProfile.contractSNS.map((sns) => (
                    <div
                      key={sns}
                      className="flex items-center space-x-2 px-3 py-2 bg-white border border-[#FF8A15]"
                    >
                      <span className="text-lg">
                        {sns === 'instagram' ? 'üì∑' : 
                         sns === 'x' ? 'üê¶' : 
                         sns === 'tiktok' ? 'üéµ' : 
                         sns === 'youtube' ? 'üì∫' : 'üì±'}
                      </span>
                      <span className="font-semibold text-gray-900 text-sm capitalize">
                        {sns === 'x' ? 'X (Twitter)' : sns}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}

        {/* Ë™¨Êòé„Éê„Éä„Éº */}
        <div className="mb-6 bg-white border-l-4 border-[#FF8A15] p-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Sparkles className="w-6 h-6 text-[#FF8A15]" />
              <div>
                <h2 className="text-xl font-bold text-gray-900">Âæ°Á§æÂ∞ÇÁî®AIË®≠ÂÆö</h2>
                <p className="text-sm text-gray-600">
                  {userProfile?.businessInfo?.industry 
                    ? '„ÅÑ„Åü„Å†„ÅÑ„Åü„Éí„Ç¢„É™„É≥„Ç∞„Çí„ÇÇ„Å®„Å´ÁµÑ„ÅøËæº„Çì„Åß„ÅÑ„Åæ„Åô'
                    : '„Éì„Ç∏„Éç„Çπ„Å´ÊúÄÈÅ©Âåñ„Åï„Çå„ÅüAI„ÇíÊßãÁØâ„Åó„Åæ„Åô'
                  }
                </p>
              </div>
            </div>
            {!isEditing && userProfile?.businessInfo?.industry && (
              <button
                onClick={() => setIsEditing(true)}
                className="flex items-center space-x-2 px-4 py-2 bg-[#FF8A15] text-white hover:bg-[#E67A0A] transition-colors"
              >
                <Edit2 className="w-4 h-4" />
                <span>Á∑®ÈõÜ</span>
              </button>
            )}
            {isEditing && (
              <button
                onClick={() => {
                  setIsEditing(false);
                  setCurrentStep(1);
                }}
                className="flex items-center space-x-2 px-4 py-2 bg-gray-600 text-white hover:bg-gray-700 transition-colors"
              >
                <X className="w-4 h-4" />
                <span>„Ç≠„É£„É≥„Çª„É´</span>
              </button>
            )}
          </div>
        </div>

        {/* ÈÄ≤Ë°åÁä∂Ê≥Å„Éê„ÉºÔºàÁ∑®ÈõÜ„É¢„Éº„ÉâÊôÇ„ÅÆ„ÅøÔºâ */}
        {(isEditing || !userProfile?.businessInfo?.industry) && (
        <div className="mb-6">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-gray-700">„Çπ„ÉÜ„ÉÉ„Éó {currentStep} / {totalSteps}</span>
            <span className="text-sm font-medium text-[#FF8A15]">{Math.round(progress)}%</span>
          </div>
          <div className="w-full bg-gray-200 h-2 overflow-hidden">
            <div
              className="h-full bg-[#FF8A15] transition-all duration-500 ease-out"
              style={{ width: `${progress}%` }}
            />
          </div>
          <div className="flex justify-between mt-4">
            {[1, 2, 3].map((step) => (
              <div
                key={step}
                className={`flex items-center ${step < 3 ? 'flex-1' : ''}`}
              >
                <div
                  className={`flex items-center justify-center w-8 h-8 border-2 transition-all ${
                    step < currentStep
                      ? 'bg-green-500 border-green-500 text-white'
                      : step === currentStep
                      ? 'bg-[#FF8A15] border-[#FF8A15] text-white'
                      : 'bg-white border-gray-300 text-gray-400'
                  }`}
                >
                  {step < currentStep ? (
                    <CheckCircle className="w-5 h-5" />
                  ) : (
                    <span className="font-semibold text-sm">{step}</span>
                  )}
                </div>
                {step < 3 && (
                  <div
                    className={`flex-1 h-1 mx-2 ${
                      step < currentStep ? 'bg-green-500' : 'bg-gray-300'
                    }`}
                  />
                )}
              </div>
            ))}
          </div>
        </div>
        )}

        {/* „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ */}
        {(isEditing || !userProfile?.businessInfo?.industry) ? (
        <div className="bg-white border border-gray-200 p-6">
          {/* „Çπ„ÉÜ„ÉÉ„Éó1: „Éì„Ç∏„Éç„ÇπÊÉÖÂ†± */}
          {currentStep === 1 && (
            <div className="space-y-6">
              <div>
                <h2 className="text-2xl font-bold text-gray-900 mb-2">„Éì„Ç∏„Éç„ÇπÊÉÖÂ†±</h2>
                <p className="text-gray-600">„ÅÇ„Å™„Åü„ÅÆ„Éì„Ç∏„Éç„Çπ„Å´„Å§„ÅÑ„Å¶Êïô„Åà„Å¶„Åè„Å†„Åï„ÅÑ</p>
              </div>

              <div className="space-y-4">
                {/* Ê•≠Á®Æ */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ê•≠Á®Æ <span className="text-red-500">*</span>
                  </label>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                    {industryOptions.map((option) => (
                      <button
                        key={option}
                        onClick={() => setBusinessInfo({ ...businessInfo, industry: option })}
                        className={`p-3 border-2 text-sm font-medium transition-all ${
                          businessInfo.industry === option
                            ? 'border-[#FF8A15] bg-white text-[#FF8A15]'
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {option}
                      </button>
                    ))}
                  </div>
                  {/* „Äå„Åù„ÅÆ‰ªñ„ÄçÈÅ∏ÊäûÊôÇ„ÅÆ„ÉÜ„Ç≠„Çπ„ÉàÂÖ•Âäõ */}
                  {businessInfo.industry === '„Åù„ÅÆ‰ªñ' && (
                    <div className="mt-3">
                      <input
                        type="text"
                        value={customIndustry}
                        onChange={(e) => setCustomIndustry(e.target.value)}
                        placeholder="Ê•≠Á®Æ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                        className="w-full px-4 py-2 border-2 border-[#FF8A15] focus:outline-none focus:ring-2 focus:ring-[#FF8A15]"
                      />
                    </div>
                  )}
                </div>

                {/* ‰ºöÁ§æË¶èÊ®° */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‰ºöÁ§æË¶èÊ®° <span className="text-red-500">*</span>
                  </label>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                    {companySizeOptions.map((option) => (
                      <button
                        key={option}
                        onClick={() => setBusinessInfo({ ...businessInfo, companySize: option })}
                        className={`p-3 rounded-lg border-2 text-sm font-medium transition-all ${
                          businessInfo.companySize === option
                            ? 'border-[#FF8A15] bg-white text-[#FF8A15]'
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {option}
                      </button>
                    ))}
                  </div>
                </div>

                {/* ‰∫ãÊ•≠ÂΩ¢ÊÖã */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‰∫ãÊ•≠ÂΩ¢ÊÖã <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="text"
                    value={businessInfo.businessType}
                    onChange={(e) => setBusinessInfo({ ...businessInfo, businessType: e.target.value })}
                    placeholder="‰æã: BtoC„ÄÅBtoB„ÄÅBtoB/BtoC‰∏°Êñπ„Å™„Å©"
                    className="w-full px-4 py-2 border-2 border-gray-200 focus:outline-none focus:ring-2 focus:ring-[#FF8A15] focus:border-[#FF8A15]"
                  />
                </div>

                {/* „Çø„Éº„Ç≤„ÉÉ„ÉàÂ∏ÇÂ†¥ */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    „Çø„Éº„Ç≤„ÉÉ„ÉàÂ∏ÇÂ†¥ <span className="text-red-500">*</span>
                  </label>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                    {targetMarketOptions.map((option) => (
                      <button
                        key={option}
                        onClick={() => setBusinessInfo({ ...businessInfo, targetMarket: option })}
                        className={`p-3 rounded-lg border-2 text-sm font-medium transition-all ${
                          businessInfo.targetMarket === option
                            ? 'border-[#FF8A15] bg-white text-[#FF8A15]'
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {option}
                      </button>
                    ))}
                  </div>
                </div>

                {/* „Ç≠„É£„ÉÉ„ÉÅ„Ç≥„Éî„Éº */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    üí¨ „Ç≠„É£„ÉÉ„ÉÅ„Ç≥„Éî„Éº
                    <span className="ml-2 text-xs text-gray-500">ÔºàAI„ÅåÂèÇÁÖß„Åó„Åæ„ÅôÔºâ</span>
                  </label>
                  <input
                    type="text"
                    value={businessInfo.catchphrase || ''}
                    onChange={(e) => setBusinessInfo({ ...businessInfo, catchphrase: e.target.value })}
                    placeholder="‰æã: „ÅÇ„Å™„Åü„ÅÆÁæé„Åó„Åï„ÇíÊúÄÂ§ßÈôê„Å´Âºï„ÅçÂá∫„Åô„ÄÅ„Éó„É≠„ÅÆÊäÄË°ì"
                    className="w-full px-4 py-2 border-2 border-gray-200 focus:outline-none focus:ring-2 focus:ring-[#FF8A15] focus:border-[#FF8A15]"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    üí° „Éñ„É©„É≥„Éâ„ÅÆÊ†∏ÂøÉ„ÇíË°®„Åô‰∏ÄÊñá„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ
                  </p>
                </div>

                {/* ‰∫ãÊ•≠ÂÜÖÂÆπ */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‰∫ãÊ•≠ÂÜÖÂÆπÔºà‰ªªÊÑèÔºâ
                  </label>
                  <textarea
                    value={businessInfo.description}
                    onChange={(e) => setBusinessInfo({ ...businessInfo, description: e.target.value })}
                    placeholder="‰æã: „Ç™„É≥„É©„Ç§„É≥„Åß„Éè„É≥„Éâ„É°„Ç§„ÉâÂïÜÂìÅ„ÇíË≤©Â£≤„Åó„Å¶„ÅÑ„Åæ„Åô"
                    className="w-full px-4 py-3 border-2 border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    rows={3}
                  />
                </div>

                {/* ÂïÜÂìÅ„Éª„Çµ„Éº„Éì„Çπ„ÉªÊîøÁ≠ñÊÉÖÂ†± */}
                <div className="border-t-2 border-gray-200 pt-6">
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    üì¶ ÂïÜÂìÅ„Éª„Çµ„Éº„Éì„Çπ„ÉªÊîøÁ≠ñÊÉÖÂ†±
                    <span className="ml-2 text-xs text-gray-500">ÔºàAI„ÅåÂèÇÁÖß„Åó„Åæ„ÅôÔºâ</span>
                  </label>
                  
                  {/* ÂÖ•Âäõ„Éï„Ç©„Éº„É† */}
                  <div className="space-y-3 mb-4">
                    <div>
                      <input
                        type="text"
                        value={productName}
                        onChange={(e) => setProductName(e.target.value)}
                        placeholder={
                          businessInfo.industry === 'ÁæéÂÆπ„ÉªÂÅ•Â∫∑' ? '‰æã: „Ç´„ÉÉ„Éà' :
                          businessInfo.industry === 'È£≤È£ü' ? '‰æã: „É©„É≥„ÉÅ„Çª„ÉÉ„Éà' :
                          businessInfo.industry === 'ÊïôËÇ≤' ? '‰æã: Ëã±‰ºöË©±„Ç≥„Éº„Çπ' :
                          '‰æã: ÂïÜÂìÅÂêç„ÄÅ„Çµ„Éº„Éì„ÇπÂêç„ÄÅÊîøÁ≠ñÂêç'
                        }
                        className="w-full px-4 py-2 border-2 border-gray-200 focus:outline-none focus:ring-2 focus:ring-[#FF8A15] focus:border-[#FF8A15]"
                      />
                    </div>
                    <div className="flex gap-2">
                      <input
                        type="text"
                        value={productDetails}
                        onChange={(e) => setProductDetails(e.target.value)}
                        placeholder={
                          businessInfo.industry === 'ÁæéÂÆπ„ÉªÂÅ•Â∫∑' ? '‰æã: ¬•4,000 - ‰∏ÅÂØß„Å™„Ç´„ÉÉ„ÉàÊñΩË°ì' :
                          businessInfo.industry === 'È£≤È£ü' ? '‰æã: ¬•980 - Êó•Êõø„Çè„Çä„É°„Ç§„É≥+„Çµ„É©„ÉÄ+„Éâ„É™„É≥„ÇØ' :
                          businessInfo.industry === 'ÊïôËÇ≤' ? '‰æã: ÊúàÈ°ç¬•15,000 - „Éû„É≥„ÉÑ„Éº„Éû„É≥„É¨„ÉÉ„Çπ„É≥' :
                          '‰æã: ‰æ°Ê†º„ÇÑË©≥Á¥∞„ÇíÂÖ•Âäõ'
                        }
                        className="flex-1 px-4 py-2 border-2 border-gray-200 focus:outline-none focus:ring-2 focus:ring-[#FF8A15] focus:border-[#FF8A15]"
                      />
                      {editingProductId ? (
                        <>
                          <button
                            onClick={saveEditProduct}
                            className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 transition-colors flex items-center gap-1"
                          >
                            <Save className="w-4 h-4" />
                            ‰øùÂ≠ò
                          </button>
                          <button
                            onClick={cancelEditProduct}
                            className="bg-gray-400 hover:bg-gray-500 text-white px-4 py-2 transition-colors"
                          >
                            <X className="w-4 h-4" />
                          </button>
                        </>
                      ) : (
                        <button
                          onClick={addProduct}
                          className="bg-[#FF8A15] hover:bg-orange-600 text-white px-6 py-2 transition-colors font-medium"
                        >
                          ËøΩÂä†
                        </button>
                      )}
                    </div>
                  </div>

                  {/* ËøΩÂä†„Åï„Çå„ÅüÂïÜÂìÅ„Éª„Çµ„Éº„Éì„Çπ‰∏ÄË¶ß */}
                  {productsOrServices.length > 0 && (
                    <div className="space-y-2">
                      {productsOrServices.map((item) => (
                        <div
                          key={item.id}
                          className="bg-white border border-gray-200 border-l-4 border-l-[#FF8A15] p-3 flex items-start justify-between group hover:shadow-sm transition-shadow"
                        >
                          <div className="flex-1">
                            <div className="flex items-center gap-2">
                              <span className="text-lg">üè∑Ô∏è</span>
                              <h4 className="font-semibold text-gray-900">{item.name}</h4>
                            </div>
                            {item.details && (
                              <p className="text-sm text-gray-600 mt-1 ml-7">{item.details}</p>
                            )}
                          </div>
                          <div className="flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
                            <button
                              onClick={() => startEditProduct(item)}
                              className="text-blue-600 hover:text-blue-700 text-sm px-2 py-1"
                            >
                              Á∑®ÈõÜ
                            </button>
                            <button
                              onClick={() => removeProduct(item.id)}
                              className="text-red-600 hover:text-red-700 text-sm px-2 py-1"
                            >
                              ÂâäÈô§
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}

                  {productsOrServices.length === 0 && (
                    <p className="text-sm text-gray-500 text-center py-4 bg-gray-50 rounded-lg">
                      ÂïÜÂìÅ„ÄÅ„Çµ„Éº„Éì„Çπ„ÄÅ„Åæ„Åü„ÅØÊîøÁ≠ñ„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ
                    </p>
                  )}
                </div>
              </div>
            </div>
          )}

          {/* „Çπ„ÉÜ„ÉÉ„Éó2: ÁõÆÊ®ô„ÉªË™≤È°å */}
          {currentStep === 2 && (
            <div className="space-y-6">
              <div>
                <h2 className="text-2xl font-bold text-gray-900 mb-2">ÁõÆÊ®ô„Å®Ë™≤È°å</h2>
                <p className="text-gray-600">SNSÈÅãÁî®„ÅÆÁõÆÊ®ô„Å®Ë™≤È°å„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>
              </div>

              <div className="space-y-6">
                {/* ÁõÆÊ®ô */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    ÁõÆÊ®ôÔºàË§áÊï∞ÈÅ∏ÊäûÂèØÔºâ <span className="text-red-500">*</span>
                  </label>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                    {goalOptions.map((option) => (
                      <button
                        key={option}
                        onClick={() => {
                          if (goals.includes(option)) {
                            setGoals(goals.filter(g => g !== option));
                          } else {
                            setGoals([...goals, option]);
                          }
                        }}
                        className={`p-3 rounded-lg border-2 text-sm font-medium transition-all ${
                          goals.includes(option)
                            ? 'border-[#FF8A15] bg-white text-[#FF8A15]'
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {option}
                      </button>
                    ))}
                  </div>
                  {goals.length > 0 && (
                    <p className="mt-2 text-sm text-gray-600">{goals.length}ÂÄãÈÅ∏Êäû‰∏≠</p>
                  )}
                  {/* „Ç´„Çπ„Çø„É†ÁõÆÊ®ôËøΩÂä† */}
                  <div className="mt-3 flex gap-2">
                    <input
                      type="text"
                      value={customGoal}
                      onChange={(e) => setCustomGoal(e.target.value)}
                      placeholder="„Ç´„Çπ„Çø„É†ÁõÆÊ®ô„ÇíËøΩÂä†"
                      className="flex-1 px-4 py-2 border-2 border-gray-200 focus:outline-none focus:border-[#FF8A15]"
                      onKeyPress={(e) => {
                        if (e.key === 'Enter' && customGoal.trim()) {
                          setGoals([...goals, customGoal.trim()]);
                          setCustomGoal('');
                        }
                      }}
                    />
                    <button
                      onClick={() => {
                        if (customGoal.trim()) {
                          setGoals([...goals, customGoal.trim()]);
                          setCustomGoal('');
                        }
                      }}
                      className="px-4 py-2 bg-[#FF8A15] text-white hover:bg-[#E67A0A] transition-colors"
                    >
                      ËøΩÂä†
                    </button>
                  </div>
                </div>

                {/* Ë™≤È°å */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    Ë™≤È°åÔºàË§áÊï∞ÈÅ∏ÊäûÂèØÔºâ <span className="text-red-500">*</span>
                  </label>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                    {challengeOptions.map((option) => (
                      <button
                        key={option}
                        onClick={() => {
                          if (challenges.includes(option)) {
                            setChallenges(challenges.filter(c => c !== option));
                          } else {
                            setChallenges([...challenges, option]);
                          }
                        }}
                        className={`p-3 rounded-lg border-2 text-sm font-medium transition-all ${
                          challenges.includes(option)
                            ? 'border-orange-500 bg-orange-50 text-orange-700'
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {option}
                      </button>
                    ))}
                  </div>
                  {challenges.length > 0 && (
                    <p className="mt-2 text-sm text-gray-600">{challenges.length}ÂÄãÈÅ∏Êäû‰∏≠</p>
                  )}
                  {/* „Ç´„Çπ„Çø„É†Ë™≤È°åËøΩÂä† */}
                  <div className="mt-3 flex gap-2">
                    <input
                      type="text"
                      value={customChallenge}
                      onChange={(e) => setCustomChallenge(e.target.value)}
                      placeholder="„Ç´„Çπ„Çø„É†Ë™≤È°å„ÇíËøΩÂä†"
                      className="flex-1 px-4 py-2 border-2 border-gray-200 focus:outline-none focus:border-[#FF8A15]"
                      onKeyPress={(e) => {
                        if (e.key === 'Enter' && customChallenge.trim()) {
                          setChallenges([...challenges, customChallenge.trim()]);
                          setCustomChallenge('');
                        }
                      }}
                    />
                    <button
                      onClick={() => {
                        if (customChallenge.trim()) {
                          setChallenges([...challenges, customChallenge.trim()]);
                          setCustomChallenge('');
                        }
                      }}
                      className="px-4 py-2 bg-[#FF8A15] text-white hover:bg-[#E67A0A] transition-colors"
                    >
                      ËøΩÂä†
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* „Çπ„ÉÜ„ÉÉ„Éó3: SNS AIË®≠ÂÆö */}
          {currentStep === 3 && (
            <div className="space-y-6">
              <div>
                <h2 className="text-2xl font-bold text-gray-900 mb-2">SNS AIË®≠ÂÆö</h2>
                <p className="text-gray-600">ÂêÑSNS„ÅÆAIË®≠ÂÆö„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ</p>
              </div>

              <div className="space-y-6">
                {/* InstagramË®≠ÂÆö */}
                <div className="p-6 bg-white border-2 border-[#FF8A15]">
                  <div className="flex items-center justify-between mb-6">
                    <div className="flex items-center space-x-3">
                      <span className="text-3xl">üì∑</span>
                      <h3 className="text-xl font-bold text-gray-900">Instagram AIË®≠ÂÆö</h3>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={snsAISettings.instagram?.enabled || false}
                        onChange={(e) => {
                          setSnsAISettings({
                            ...snsAISettings,
                            instagram: {
                              ...snsAISettings.instagram,
                              enabled: e.target.checked,
                              tone: snsAISettings.instagram?.tone || '',
                              features: snsAISettings.instagram?.features || [],
                              manner: snsAISettings.instagram?.manner || '',
                              cautions: snsAISettings.instagram?.cautions || '',
                              goals: snsAISettings.instagram?.goals || '',
                              motivation: snsAISettings.instagram?.motivation || '',
                              additionalInfo: snsAISettings.instagram?.additionalInfo || ''
                            }
                          });
                        }}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-[#FF8A15] peer-focus:ring-opacity-30 peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-[#FF8A15]"></div>
                    </label>
                  </div>

                  {snsAISettings.instagram?.enabled && (
                    <div className="space-y-4">
                      {/* „Éà„Éº„É≥ÂÖ•Âäõ */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          „Éà„Éº„É≥ <span className="text-red-500">*</span>
                        </label>
                        <input
                          type="text"
                          value={snsAISettings.instagram?.tone || ''}
                          onChange={(e) => {
                            setSnsAISettings({
                              ...snsAISettings,
                              instagram: {
                                ...snsAISettings.instagram,
                                enabled: true,
                                tone: e.target.value,
                                features: snsAISettings.instagram?.features || []
                              }
                            });
                          }}
                          placeholder="‰æã: „Éï„É¨„É≥„Éâ„É™„Éº„ÄÅ„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´„ÄÅ„Ç´„Ç∏„É•„Ç¢„É´„Å™„Å©"
                          className="w-full px-4 py-2 border-2 border-gray-200 focus:outline-none focus:ring-2 focus:ring-[#FF8A15] focus:border-[#FF8A15]"
                        />
                      </div>

                      {/* „Éû„Éä„Éº */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          „Éû„Éä„Éº„Éª„É´„Éº„É´
                        </label>
                        <textarea
                          value={snsAISettings.instagram?.manner || ''}
                          onChange={(e) => {
                            setSnsAISettings({
                              ...snsAISettings,
                              instagram: {
                                ...snsAISettings.instagram,
                                enabled: true,
                                manner: e.target.value
                              }
                            });
                          }}
                          placeholder="‰æã: ÁµµÊñáÂ≠ó„ÅØÊéß„Åà„ÇÅ„Å´„ÄÅÊï¨Ë™û„Çí‰Ωø„ÅÜ„ÄÅÊ•≠ÁïåÁî®Ë™û„ÅØÈÅø„Åë„Çã„Å™„Å©"
                          className="w-full px-4 py-2 border-2 border-gray-200 focus:outline-none focus:ring-2 focus:ring-[#FF8A15] focus:border-[#FF8A15]"
                          rows={3}
                        />
                      </div>

                      {/* Ê≥®ÊÑè‰∫ãÈ†Ö */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Ê≥®ÊÑè‰∫ãÈ†Ö„ÉªNG„ÉØ„Éº„Éâ
                        </label>
                        <textarea
                          value={snsAISettings.instagram?.cautions || ''}
                          onChange={(e) => {
                            setSnsAISettings({
                              ...snsAISettings,
                              instagram: {
                                ...snsAISettings.instagram,
                                enabled: true,
                                cautions: e.target.value
                              }
                            });
                          }}
                          placeholder="‰æã: Á´∂Âêà‰ªñÁ§æÂêç„ÅØ‰Ωø„Çè„Å™„ÅÑ„ÄÅÁâπÂÆö„ÅÆË°®Áèæ„ÅØÈÅø„Åë„Çã„Å™„Å©"
                          className="w-full px-4 py-2 border-2 border-gray-200 focus:outline-none focus:ring-2 focus:ring-[#FF8A15] focus:border-[#FF8A15]"
                          rows={3}
                        />
                      </div>

                      {/* InstagramÁõÆÊ®ô */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          InstagramÈÅãÁî®„ÅÆÁõÆÊ®ô
                        </label>
                        <textarea
                          value={snsAISettings.instagram?.goals || ''}
                          onChange={(e) => {
                            setSnsAISettings({
                              ...snsAISettings,
                              instagram: {
                                ...snsAISettings.instagram,
                                enabled: true,
                                goals: e.target.value
                              }
                            });
                          }}
                          placeholder="‰æã: 3„É∂Êúà„Åß1‰∏á„Éï„Ç©„É≠„ÉØ„ÉºÈÅîÊàê„ÄÅ„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„ÉàÁéá5%‰ª•‰∏ä„Å™„Å©"
                          className="w-full px-4 py-2 border-2 border-gray-200 focus:outline-none focus:ring-2 focus:ring-[#FF8A15] focus:border-[#FF8A15]"
                          rows={3}
                        />
                      </div>

                      {/* ÈÅãÁî®ÂãïÊ©ü */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Instagram„ÇíÂßã„ÇÅ„ÅüÁêÜÁî±„ÉªÂãïÊ©ü
                        </label>
                        <textarea
                          value={snsAISettings.instagram?.motivation || ''}
                          onChange={(e) => {
                            setSnsAISettings({
                              ...snsAISettings,
                              instagram: {
                                ...snsAISettings.instagram,
                                enabled: true,
                                motivation: e.target.value
                              }
                            });
                          }}
                          placeholder="‰æã: „Éñ„É©„É≥„ÉâË™çÁü•Â∫¶„Çí‰∏ä„Åí„Åü„ÅÑ„ÄÅÈ°ßÂÆ¢„Å®„ÅÆ„Ç≥„Éü„É•„Éã„Ç±„Éº„Ç∑„Éß„É≥„ÇíÂº∑Âåñ„Åó„Åü„ÅÑ„Å™„Å©"
                          className="w-full px-4 py-2 border-2 border-gray-200 focus:outline-none focus:ring-2 focus:ring-[#FF8A15] focus:border-[#FF8A15]"
                          rows={3}
                        />
                      </div>

                      {/* „Åù„ÅÆ‰ªñAIÂèÇËÄÉÊÉÖÂ†± */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          „Åù„ÅÆ‰ªñAI„Å´‰ºù„Åà„Åü„ÅÑÊÉÖÂ†±
                        </label>
                        <textarea
                          value={snsAISettings.instagram?.additionalInfo || ''}
                          onChange={(e) => {
                            setSnsAISettings({
                              ...snsAISettings,
                              instagram: {
                                ...snsAISettings.instagram,
                                enabled: true,
                                additionalInfo: e.target.value
                              }
                            });
                          }}
                          placeholder="‰æã: ÊäïÁ®øÈ†ªÂ∫¶„ÅÆÂ∏åÊúõ„ÄÅÂ•Ω„Åç„Å™„Ç§„É≥„Éï„É´„Ç®„É≥„Çµ„Éº„ÄÅÂèÇËÄÉ„Å´„Åó„Åü„ÅÑ„Ç¢„Ç´„Ç¶„É≥„Éà„Å™„Å©"
                          className="w-full px-4 py-2 border-2 border-gray-200 focus:outline-none focus:ring-2 focus:ring-[#FF8A15] focus:border-[#FF8A15]"
                          rows={3}
                        />
                      </div>

                      {/* Ê©üËÉΩÈÅ∏Êäû */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Ê©üËÉΩÔºàË§áÊï∞ÈÅ∏ÊäûÂèØÔºâ</label>
                        <div className="grid grid-cols-2 gap-2">
                          {featureOptions.map((option) => (
                            <button
                              key={option}
                              onClick={() => {
                                const currentFeatures = snsAISettings.instagram?.features || [];
                                const newFeatures = currentFeatures.includes(option)
                                  ? currentFeatures.filter(f => f !== option)
                                  : [...currentFeatures, option];
                                
                                setSnsAISettings({
                                  ...snsAISettings,
                                  instagram: {
                                    ...snsAISettings.instagram,
                                    enabled: true,
                                    tone: snsAISettings.instagram?.tone || '„Éï„É¨„É≥„Éâ„É™„Éº',
                                    features: newFeatures
                                  }
                                });
                              }}
                              className={`p-2 rounded-lg border-2 text-sm font-medium transition-all ${
                                snsAISettings.instagram?.features?.includes(option)
                                  ? 'border-purple-500 bg-purple-50 text-purple-700'
                                  : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                              }`}
                            >
                              {option}
                            </button>
                          ))}
                        </div>
                      </div>
                      {/* „Ç´„Çπ„Çø„É†Ê©üËÉΩËøΩÂä† */}
                      <div className="mt-3 flex gap-2">
                        <input
                          type="text"
                          value={customFeature}
                          onChange={(e) => setCustomFeature(e.target.value)}
                          placeholder="„Ç´„Çπ„Çø„É†Ê©üËÉΩ„ÇíËøΩÂä†"
                          className="flex-1 px-4 py-2 border-2 border-gray-200 focus:outline-none focus:border-[#FF8A15]"
                          onKeyPress={(e) => {
                            if (e.key === 'Enter' && customFeature.trim()) {
                              const currentFeatures = snsAISettings.instagram?.features || [];
                              setSnsAISettings({
                                ...snsAISettings,
                                instagram: {
                                  ...snsAISettings.instagram,
                                  enabled: true,
                                  tone: snsAISettings.instagram?.tone || '„Éï„É¨„É≥„Éâ„É™„Éº',
                                  features: [...currentFeatures, customFeature.trim()]
                                }
                              });
                              setCustomFeature('');
                            }
                          }}
                        />
                        <button
                          onClick={() => {
                            if (customFeature.trim()) {
                              const currentFeatures = snsAISettings.instagram?.features || [];
                              setSnsAISettings({
                                ...snsAISettings,
                                instagram: {
                                  ...snsAISettings.instagram,
                                  enabled: true,
                                  tone: snsAISettings.instagram?.tone || '„Éï„É¨„É≥„Éâ„É™„Éº',
                                  features: [...currentFeatures, customFeature.trim()]
                                }
                              });
                              setCustomFeature('');
                            }
                          }}
                          className="px-4 py-2 bg-[#FF8A15] text-white hover:bg-[#E67A0A] transition-colors"
                        >
                          ËøΩÂä†
                        </button>
                      </div>
                    </div>
                  )}
                </div>

                {/* ‰ªñ„ÅÆSNS„ÇÇÂêåÊßò„Å´ËøΩÂä†ÂèØËÉΩ */}
                <p className="text-sm text-gray-500 text-center">
                  ‚Äª ‰ªñ„ÅÆSNSË®≠ÂÆö„ÅØÂæå„Åã„Çâ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„ÅßËøΩÂä†„Åß„Åç„Åæ„Åô
                </p>
              </div>
            </div>
          )}

          {/* „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
          <div className="flex items-center justify-between mt-8 pt-6 border-t border-gray-200">
            <button
              onClick={handleBack}
              disabled={currentStep === 1}
              className={`flex items-center space-x-2 px-6 py-3 rounded-lg font-medium transition-all ${
                currentStep === 1
                  ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              <ArrowLeft className="w-5 h-5" />
              <span>Êàª„Çã</span>
            </button>

            {currentStep < totalSteps ? (
              <button
                onClick={handleNext}
                disabled={
                  (currentStep === 1 && !isStep1Valid) ||
                  (currentStep === 2 && !isStep2Valid)
                }
                className={`flex items-center space-x-2 px-6 py-3 rounded-lg font-medium transition-all ${
                  (currentStep === 1 && !isStep1Valid) || (currentStep === 2 && !isStep2Valid)
                    ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                    : 'bg-[#FF8A15] text-white hover:bg-[#E67A0A] shadow-lg hover:shadow-xl'
                }`}
              >
                <span>Ê¨°„Å∏</span>
                <ArrowRight className="w-5 h-5" />
              </button>
            ) : (
              <button
                onClick={handleComplete}
                disabled={!isStep3Valid || isSubmitting}
                className={`flex items-center space-x-2 px-6 py-3 rounded-lg font-medium transition-all ${
                  !isStep3Valid || isSubmitting
                    ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                    : 'bg-gradient-to-r from-green-600 to-emerald-600 text-white hover:from-green-700 hover:to-emerald-700 shadow-lg hover:shadow-xl'
                }`}
              >
                {isSubmitting ? (
                  <>
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                    <span>Ë®≠ÂÆö‰∏≠...</span>
                  </>
                ) : (
                  <>
                    <CheckCircle className="w-5 h-5" />
                    <span>ÂÆå‰∫Ü</span>
                  </>
                )}
              </button>
            )}
          </div>
        </div>
        ) : (
          /* Èñ≤Ë¶ß„É¢„Éº„Éâ */
          <div className="space-y-6">
            {/* „Éì„Ç∏„Éç„ÇπÊÉÖÂ†± */}
            <div className="bg-white border border-gray-200 border-l-4 border-l-[#FF8A15] p-6">
              <h3 className="text-lg font-bold text-gray-900 mb-4">„Éì„Ç∏„Éç„ÇπÊÉÖÂ†±</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Ê•≠Á®Æ</label>
                  <p className="text-gray-900">{getIndustryLabel(businessInfo.industry) || 'Êú™Ë®≠ÂÆö'}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">‰ºöÁ§æË¶èÊ®°</label>
                  <p className="text-gray-900">{getCompanySizeLabel(businessInfo.companySize) || 'Êú™Ë®≠ÂÆö'}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">‰∫ãÊ•≠ÂΩ¢ÊÖã</label>
                  <p className="text-gray-900">{getBusinessTypeLabel(businessInfo.businessType) || 'Êú™Ë®≠ÂÆö'}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">„Çø„Éº„Ç≤„ÉÉ„ÉàÂ∏ÇÂ†¥</label>
                  <p className="text-gray-900">{getTargetMarketLabel(businessInfo.targetMarket) || 'Êú™Ë®≠ÂÆö'}</p>
                </div>
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-1">üí¨ „Ç≠„É£„ÉÉ„ÉÅ„Ç≥„Éî„Éº</label>
                  <p className="text-gray-900 font-medium">{businessInfo.catchphrase || 'Êú™Ë®≠ÂÆö'}</p>
                </div>
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-1">‰∫ãÊ•≠ÂÜÖÂÆπ</label>
                  <p className="text-gray-900">{businessInfo.description || 'Êú™Ë®≠ÂÆö'}</p>
                </div>
              </div>

              {/* ÂïÜÂìÅ„Éª„Çµ„Éº„Éì„Çπ„ÉªÊîøÁ≠ñÊÉÖÂ†± */}
              {productsOrServices.length > 0 && (
                <div className="mt-4 pt-4 border-t-2 border-gray-200">
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    üì¶ ÂïÜÂìÅ„Éª„Çµ„Éº„Éì„Çπ„ÉªÊîøÁ≠ñÊÉÖÂ†±
                  </label>
                  <div className="space-y-2">
                    {productsOrServices.map((item) => (
                      <div
                        key={item.id}
                        className="bg-white border border-gray-200 border-l-4 border-l-[#FF8A15] p-3"
                      >
                        <div className="flex items-center gap-2">
                          <span className="text-lg">üè∑Ô∏è</span>
                          <h4 className="font-semibold text-gray-900">{item.name}</h4>
                        </div>
                        {item.details && (
                          <p className="text-sm text-gray-600 mt-1 ml-7">{item.details}</p>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>

            {/* ÁõÆÊ®ô„ÉªË™≤È°å */}
            <div className="bg-white border border-gray-200 border-l-4 border-l-[#FF8A15] p-6">
              <h3 className="text-lg font-bold text-gray-900 mb-4">ÁõÆÊ®ô„Å®Ë™≤È°å</h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">ÁõÆÊ®ô</label>
                  <div className="flex flex-wrap gap-2">
                    {goals.length > 0 ? goals.map((goal, index) => (
                      <span key={index} className="px-3 py-1 bg-blue-50 text-blue-700 rounded-full text-sm">
                        {goal}
                      </span>
                    )) : <span className="text-gray-500">Êú™Ë®≠ÂÆö</span>}
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Ë™≤È°å</label>
                  <div className="flex flex-wrap gap-2">
                    {challenges.length > 0 ? challenges.map((challenge, index) => (
                      <span key={index} className="px-3 py-1 bg-orange-50 text-orange-700 rounded-full text-sm">
                        {challenge}
                      </span>
                    )) : <span className="text-gray-500">Êú™Ë®≠ÂÆö</span>}
                  </div>
                </div>
              </div>
            </div>

            {/* SNS AIË®≠ÂÆö */}
            <div className="bg-white border border-gray-200 border-l-4 border-l-[#FF8A15] p-6">
              <h3 className="text-lg font-bold text-gray-900 mb-4">SNS AIË®≠ÂÆö</h3>
              <div className="space-y-4">
                {Object.keys(snsAISettings).length > 0 ? (
                  Object.entries(snsAISettings).map(([snsType, settings]) => {
                    const extendedSettings = settings as {
                      enabled: boolean;
                      tone?: string;
                      features?: string[];
                      manner?: string;
                      cautions?: string;
                      goals?: string;
                      motivation?: string;
                      additionalInfo?: string;
                    };
                    
                    return (
                      <div key={snsType} className="p-4 border-2 border-[#FF8A15]">
                        <div className="flex items-center justify-between mb-4">
                          <div className="flex items-center space-x-2">
                            <span className="text-2xl">
                              {snsType === 'instagram' ? 'üì∑' : snsType === 'x' ? 'üê¶' : 'üì±'}
                            </span>
                            <span className="font-bold text-gray-900 text-lg capitalize">{snsType}</span>
                          </div>
                          <span className={`px-3 py-1 text-xs font-medium ${
                            extendedSettings.enabled ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-700'
                          }`}>
                            {extendedSettings.enabled ? '‚úì ÊúâÂäπ' : 'ÁÑ°Âäπ'}
                          </span>
                        </div>
                        {extendedSettings.enabled && (
                          <div className="space-y-3 text-sm">
                            {extendedSettings.tone && (
                              <div className="pb-2 border-b border-gray-200">
                                <span className="text-gray-600 font-medium">„Éà„Éº„É≥:</span>
                                <p className="text-gray-900 mt-1">{extendedSettings.tone}</p>
                              </div>
                            )}
                            {extendedSettings.manner && (
                              <div className="pb-2 border-b border-gray-200">
                                <span className="text-gray-600 font-medium">„Éû„Éä„Éº„Éª„É´„Éº„É´:</span>
                                <p className="text-gray-900 mt-1 whitespace-pre-wrap">{extendedSettings.manner}</p>
                              </div>
                            )}
                            {extendedSettings.cautions && (
                              <div className="pb-2 border-b border-gray-200">
                                <span className="text-gray-600 font-medium">Ê≥®ÊÑè‰∫ãÈ†Ö„ÉªNG„ÉØ„Éº„Éâ:</span>
                                <p className="text-gray-900 mt-1 whitespace-pre-wrap">{extendedSettings.cautions}</p>
                              </div>
                            )}
                            {extendedSettings.goals && (
                              <div className="pb-2 border-b border-gray-200">
                                <span className="text-gray-600 font-medium">InstagramÈÅãÁî®„ÅÆÁõÆÊ®ô:</span>
                                <p className="text-gray-900 mt-1 whitespace-pre-wrap">{extendedSettings.goals}</p>
                              </div>
                            )}
                            {extendedSettings.motivation && (
                              <div className="pb-2 border-b border-gray-200">
                                <span className="text-gray-600 font-medium">ÈÅãÁî®ÂãïÊ©ü:</span>
                                <p className="text-gray-900 mt-1 whitespace-pre-wrap">{extendedSettings.motivation}</p>
                              </div>
                            )}
                            {extendedSettings.additionalInfo && (
                              <div className="pb-2 border-b border-gray-200">
                                <span className="text-gray-600 font-medium">„Åù„ÅÆ‰ªñAIÂèÇËÄÉÊÉÖÂ†±:</span>
                                <p className="text-gray-900 mt-1 whitespace-pre-wrap">{extendedSettings.additionalInfo}</p>
                              </div>
                            )}
                            {extendedSettings.features && extendedSettings.features.length > 0 && (
                              <div>
                                <span className="text-gray-600 font-medium">Ê©üËÉΩ:</span>
                                <div className="flex flex-wrap gap-1 mt-1">
                                  {extendedSettings.features.map((feature, idx) => (
                                    <span key={idx} className="px-2 py-1 border border-[#FF8A15] text-[#FF8A15] text-xs">
                                      {feature}
                                    </span>
                                  ))}
                                </div>
                              </div>
                            )}
                          </div>
                        )}
                      </div>
                    );
                  })
                ) : (
                  <p className="text-gray-500">Êú™Ë®≠ÂÆö</p>
                )}
              </div>
            </div>
          </div>
        )}
        </div>
      </div>
    </SNSLayout>
  );
}

